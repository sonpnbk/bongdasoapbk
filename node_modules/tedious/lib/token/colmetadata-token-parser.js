// Generated by CoffeeScript 1.10.0
var metadataParse, parser;

metadataParse = require('../metadata-parser');

parser = function(buffer, colMetadata, options) {
  var c, colName, column, columnCount, columns, i, metadata, numberOfTableNameParts, part, ref, tableName;
  columnCount = buffer.readUInt16LE();
  columns = [];
  for (c = i = 0, ref = columnCount; 0 <= ref ? i < ref : i > ref; c = 0 <= ref ? ++i : --i) {
    metadata = metadataParse(buffer, options);
    if (metadata.type.hasTableName) {
      if (options.tdsVersion >= '7_2') {
        numberOfTableNameParts = buffer.readUInt8();
        tableName = (function() {
          var j, ref1, results;
          results = [];
          for (part = j = 1, ref1 = numberOfTableNameParts; 1 <= ref1 ? j <= ref1 : j >= ref1; part = 1 <= ref1 ? ++j : --j) {
            results.push(buffer.readUsVarchar('ucs2'));
          }
          return results;
        })();
      } else {
        tableName = buffer.readUsVarchar('ucs2');
      }
    } else {
      tableName = void 0;
    }
    colName = buffer.readBVarchar();
    if (options.columnNameReplacer) {
      colName = options.columnNameReplacer(colName, c, metadata);
    } else if (options.camelCaseColumns) {
      colName = colName.replace(/^[A-Z]/, function(s) {
        return s.toLowerCase();
      });
    }
    column = {
      userType: metadata.userType,
      flags: metadata.flags,
      type: metadata.type,
      colName: colName,
      collation: metadata.collation,
      precision: metadata.precision,
      scale: metadata.scale,
      udtInfo: metadata.udtInfo,
      dataLength: metadata.dataLength,
      tableName: tableName
    };
    columns.push(column);
  }
  return {
    name: 'COLMETADATA',
    event: 'columnMetadata',
    columns: columns
  };
};

module.exports = parser;
